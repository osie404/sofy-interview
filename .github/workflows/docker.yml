# This is a basic workflow to help you get started with Actions

name: Docker CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{matrix}}
     strategy: 
        matrix: 
          os: [ubuntu-latest, Windows-latest, macOS-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          |
      - name: Express api
        run: |
          docker build 
          docker run
          var express = require('express');
          var logger = require('morgan');
          var auth_1 = require('../auth');
          var routes_1 = require('./routes/routes');
          var bodyParser = require('body-parser');
          var Api = (function () {
            function Api() {
              this.express = express();
              this.auth = auth_1["default"]();
              this.middleware();
              this.router(this.express, this.auth);
       }
          Api.prototype.middleware = function () {
              this.express.use(logger('dev'));
              this.express.use(bodyParser.urlencoded({ extended: true }));
              this.express.use(bodyParser.json());
             this.express.use(this.auth.initialize());
        };
          Api.prototype.router = function (app, auth) {
              new routes_1["default"](app, auth);
        };
              return Api;
        }());
      exports.__esModule = true;
      exports["default"] = new Api().express;
  |
